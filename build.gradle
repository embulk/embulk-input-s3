plugins {
    id "com.jfrog.bintray" version "1.1"
    id "com.github.jruby-gradle.base" version "0.1.5"
    id "java"
}
import com.github.jrubygradle.JRubyExec

allprojects {
    group = 'org.embulk.input.s3'
    version = '0.2.7'
}

subprojects {
    apply plugin: 'maven'  // install jar files to the local repo: $ gradle install
    apply plugin: 'java'
    //apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.jruby-gradle.base'

    repositories {
        mavenCentral()
        jcenter()
    }

    configurations {
        provided
        compile.exclude group: 'commons-logging', module: 'commons-logging'   // commons-logging api is provided by jcl-over-slf4j
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile  "org.embulk:embulk-core:0.8.2"
        provided "org.embulk:embulk-core:0.8.2"
        compile "com.amazonaws:aws-java-sdk-s3:1.10.33"
        runtime "org.slf4j:jcl-over-slf4j:1.7.12"  // aws-sdk uses Apache Commons Logging and Embulk uses slf4j
        testCompile "com.amazonaws:aws-java-sdk-sts:1.10.33"
        testCompile "junit:junit:4.+"
        testCompile "org.mockito:mockito-core:1.+"
        testCompile "org.embulk:embulk-standards:0.8.2"
        testCompile "org.embulk:embulk-core:0.8.2:tests"
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
        }
    }

    task classpath(type: Copy, dependsOn: ["jar"]) {
        doFirst { file('classpath').deleteDir() }
        from (configurations.runtime - configurations.provided + files(jar.archivePath))
        into 'classpath'
    }
    clean { delete 'classpath' }

    task gem(type: JRubyExec, dependsOn: ['build', 'gemspec', 'classpath']) {
        jrubyArgs '-rrubygems/gem_runner', "-eGem::GemRunner.new.run(ARGV)", 'build'
        script "${project.projectDir.absolutePath}/build/gemspec"
        doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "${parent.projectDir}/pkg") }
    }
}

task gemPush << {
    "gem push pkg/embulk-input-s3-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-riak_cs-${project.version}.gem".execute().waitFor()
}
